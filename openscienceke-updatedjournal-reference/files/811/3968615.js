/*
 * This module add NCBI pinger functionality to the PubReader.
 * https://confluence.ncbi.nlm.nih.gov/display/PMC/PubReader+Logging
 */
 
if (typeof(jQuery) !== "undefined" && typeof(ncbi) === "object") {
    (function($) {
    
        // Page progress bar object DOM element.  For easy access for debugging.
        var ppbDomElem;  // DOM element
        
        // Rate limit the pings for the page progress bar slider.  
        // Max one every 'rate' ms.
        // FIXME:  use jquery.throttle.js
        var rate = 500;
        var lastPing = 0;

        // Event handler for jr:pm:go:page events, which are generated by hash changes
        // and by the page progress bar.
        var pageChangePinger = function(event, value) {
            var now = new Date().getTime();
            if (now - lastPing < rate) return;
            lastPing = now;

            var oevent = event.originalEvent;
            if (typeof oevent === "object" && oevent.hasOwnProperty("target")) {
                var otarget = oevent.target;

                // If from a hash change, then jsevent is "hash-change".
                // Note that Window is undefined on Android browser (PMC-15767)
                if (typeof(Window) !== "undefined" && otarget instanceof Window) {
                    jsevent = "hash-change";
                    ncbi.sg.ping([
                        "jsevent=hash-change", 
                        "jrevent=" + event.type
                    ]);
                    
                }
                // If this came from the slider, jsevent is "drag".  
                else if ($(otarget).hasClass('pr-handle')) {
                    ncbi.sg.ping(otarget, event, 'drag', 'jrevent=' + event.type);
                }
            }
        };
        
        // Event handler for swipe events
        var swipeHandler = function(e, direction, distance, duration) {
            //console.info("In swipeHandler, drooper is " + this);
            ncbi.sg.ping(this.get(0), e, "swipe");
        }

        // Resize pinger, throttle these as well
        var lastResizePing = 0;
        var resizePinger = function(e) {
            var now = new Date().getTime();
            if (now - lastResizePing < rate) return;
            lastResizePing = now;
            // The pinger doesn't like it when you pass in the the window object, give it the document instead.
            ncbi.sg.ping(document, e, "resize");
        };

        // Main initialization function; called on document ready.
        var initPubReader = function() {
            // If we're in a regular page (not PubReader) then get out
            var $jrContent = $("#jr-content");
            if (!$.jr || $jrContent.length < 1) return;

            var $ppb = $("#jr-progress");
            if ($ppb.getjr_PageProgressBar()) {
                ppbDomElem = $("#jr-progress").getjr_PageProgressBar().el;
            }
            
            lastPing = (new Date()).getTime() - rate - 1;
        
            // First scan all links, <a> elements with @href attributes
            ncbi.sg.scanLinks();
            
            // Next, add pinger functionality to the following elements explicitly
            // (typically these are <a> elements without @href attributes).
            var linkSelector = 
                "#jr-head a, " +
                "#jr-dash a, " +
                "#jr-pm-right, " +
                "#jr-pm-left, " +
                "#jr-ui aside a, " +
                ".pr-slider";
            ncbi.sg.scanLinks($(linkSelector).get());
            
            // Bind an event handler to page change events.
            $jrContent.bind("jr:pm:go:page", pageChangePinger);

            // Bind swipe event handler if we're on a touch-enabled device
            if ($.jr.utils.touch)
                $jrContent.swipe({swipe: swipeHandler}); 

            // Bind to and ping keydown events
            $(document).bind("keydown", function(e) {
                ncbi.sg.ping(this, e, "keydown", "keyCode=" + e.keyCode);
            })

            // Bind to and ping pages changed events (resize, reorientation)
            //$('#jr-content').bind("jr:pm:pages:changed", function(e) {
            $(window).resize(resizePinger);

            // Instantiate epub link interstitial dialog
            try {
                var $epubLink = $('#jr-alt-p a[href*="epub"]');
                $epubLink
                    // When the user clicks on the epub link, close the menu panel
                    .on("click", function() {
                        $('#jr-alt-p').trigger("jr:panel:hide");
                    });
                $epubLink
                    .jr_ObjectBox({
                        objectBoxClass: 'note',
                        contentLocal: true,
                        contentId: 'jr-epub-interstitial'
                    });

                $("#downloadEpub")
                    .attr("href", $epubLink.attr("href"))
                    .on("click", function() {
                        $.jr.ObjectBox.close();
                    });  

                $("#cancelEpub").on("click", function() {
                    $.jr.ObjectBox.close();
                });
            }
            catch (e) { console.error(e.message) }
            
            
            // Create an object box trigger on a dummy element.  What this does
            // is cause the "welcome to pubreader" box to display when the user
            // does not have any pmc.article.report cookie set.
            var firstTime = $('meta[name="pr-first-time"]').attr("content");
            if ( firstTime == "yes" ) {
                var $welcomeTrigger = $('#jr-welcome-trigger');
                $welcomeTrigger.jr_ObjectBox({
                    objectBoxClass: 'note small',
                    contentLocal: true,
                    contentId: 'jr-welcome'
                });
                $("#okayWelcome").on("click", function() {
                    $.jr.ObjectBox.close();
                });
                $welcomeTrigger.trigger('click');
            }
            
            // Set an event handler on the dashboard that will close the 
            // MathJax menu.  See PMC-15791.
            $('#jr-dash, #jr-is-sw').on('click', function() { $('.MathJax_Menu').hide() })

            
            if (typeof MathJax != 'undefined' && MathJax) {

                // Initialize the driver that causes equations to rerender when there are
                // significant page change events.
                // Kick things off when we get the Startup: End signal from MathJax, indicating
                // that it is finished with all its initial processing (see
                // http://docs.mathjax.org/en/latest/signals.html).
                MathJax.Hub.Register.StartupHook("End", initMathJaxRerenderer);

                // Make the MathJax zoom popper go away more often:
                MathJax.Hub.Register.StartupHook("End", function() { 
                    if (MathJax.Extension && MathJax.Extension.MathZoom) {
                        var remove_zoom_frame = function() {
                            if (document.getElementById("MathJax_ZoomFrame")) {
                                MathJax.Extension.MathZoom.Remove();
                            }
                            return true;
                        }
                        $(document).on('click', remove_zoom_frame);
                        $(document).bind("show.canvas", remove_zoom_frame);
                    }
                });
            }
            return "okay";
        };


        // This function will be called upon receipt of the MathJax "Startup: End" signal,
        // indicating MathJax is done.  It initializes the driver that causes equations
        // to rerender when there are significant page change events.
        
        var initMathJaxRerenderer = function() {
            
            // Gather the list of all disp-formula equations that have are rendered by
            // MathJax.
            var equations = $('.disp-formula:has(.MathJax_SVG_Display)');
            if (equations.length == 0) return;
            //console.info("Found " + equations.length + " mathjax equations");
            
            // Store a reference to the pagemanager object.
            var pm = $('#jr-content').getjr_PageManager();
            
            // This function gets the current relative column width
            var getColWidth = function() {
                var colWidth = pm.colW_colC_aW().cw;
                var fontSize = parseInt(equations.first().css('font-size'));
                var relColWidth = colWidth / fontSize;
                return relColWidth;
            };
            
            // Get and store the initial value of relative col width
            var lastColWidth = getColWidth();

            // Create a throttled function that will be called at most once every three
            // seconds, to rerender all of the MathJax equations on the page.
            var equationRerender = $.throttle(3000, function() {
                // Only if the "relative column width" has changed by a significant
                // amount (< 90% or > 150%)
                var newColWidth = getColWidth();
                var ratio = newColWidth / lastColWidth;
                if (ratio > 0.9 && ratio < 1.5) return;
                
                equations.each(function() {
                    var scriptId = $('script', this).attr('id');
                    //console.info("rerendering " + scriptId);
                    MathJax.Hub.getJaxFor(scriptId).Rerender();
                });
                lastColWidth = newColWidth;
            });

            // Bind this to the page changed event
            $('#jr-content').bind('jr:pm:pages:changed', equationRerender);
            
        };

        // This script loads at the bottom of the body, so I think it's safe to assume that
        // the #jr-content element already exists (before DOM ready).
        $('#jr-content').bind("jr:util:unsupported-browser", function() {
            ncbi.sg.ping([
                "jsevent=jrerror", 
                "jrerror=no-csscolumns"
            ]);
        });
        
        // PMC-18501 PubReader search function should write pinger events to applog 
        $('#jr-fip').bind("jr:fip:searched", function(e, data) {
            ncbi.sg.ping([
                "jsevent=search", 
                "log_term="+data.term,
                "log_count="+data.count
            ]);            
        });

        $('#jr-fip').bind("jr:fip:dismissed", function() {
            ncbi.sg.ping([
                "jsevent=click", 
                "link_id=clear"
            ]);            
        });
        
        // PubReader logs every key press. It needs to be disabled for search term field.
        // https://jira.ncbi.nlm.nih.gov/browse/PMC-18501?focusedCommentId=2668235&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-2668235
        $('#jr-fip-term').bind("keydown", function(e) {
            e.stopPropagation();
        });
        
        // PMC-18609 Add MyNCBI button to PubReader
        addMyNCBIButton($('#jr-about-sw'));
        
        $(document).ready(function() {
            initPubReader();
        })

    })(jQuery);
}

/**
 * This function clones element and appends it right after the source
 */
function addMyNCBIButton(el)
{
    el.clone()
        .insertAfter(el)
        .attr('id', 'myncbi-link') // Get rid of original id
        .attr('href', '/myncbi/?back_url='+window.location) // Build URL to MyNCBI
        .removeData('href')
        .removeData('path') 
        .html('My NCBI'); // Update text
    
}
